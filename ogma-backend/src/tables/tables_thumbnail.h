// generated by ./libs/sqlpp11/scripts/ddl2cpp ./sql/thumbnail-schema.sql ./src/tables/ ogma::db::tables
#ifndef OGMA_DB_TABLES_H
#define OGMA_DB_TABLES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace ogma
{
namespace db
{
namespace tables
{
  namespace Thumbnails_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Hash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hash;
            T& operator()() { return hash; }
            const T& operator()() const { return hash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct NixPath
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nixPath";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nixPath;
            T& operator()() { return nixPath; }
            const T& operator()() const { return nixPath; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct IsDir
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "isDir";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isDir;
            T& operator()() { return isDir; }
            const T& operator()() const { return isDir; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Epoch
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "epoch";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T epoch;
            T& operator()() { return epoch; }
            const T& operator()() const { return epoch; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Thumbnails_

  struct Thumbnails: sqlpp::table_t<Thumbnails,
               Thumbnails_::Id,
               Thumbnails_::Hash,
               Thumbnails_::NixPath,
               Thumbnails_::IsDir,
               Thumbnails_::Epoch>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "thumbnails";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T thumbnails;
        T& operator()() { return thumbnails; }
        const T& operator()() const { return thumbnails; }
      };
    };
  };
} // namespace ogma
} // namespace db
} // namespace tables
#endif
