// generated by ./libs/sqlpp11/scripts/ddl2cpp ./sql/collection-schema.sql ./src/tables/ ogma::db
#ifndef OGMA_DB_DATA_H
#define OGMA_DB_DATA_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace ogma
{
namespace db
{
  namespace Version_
  {
    struct Version
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "version";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T version;
            T& operator()() { return version; }
            const T& operator()() const { return version; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Version_

  struct Version: sqlpp::table_t<Version,
               Version_::Version>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "version";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T version;
        T& operator()() { return version; }
        const T& operator()() const { return version; }
      };
    };
  };
  namespace Properties_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Properties_

  struct Properties: sqlpp::table_t<Properties,
               Properties_::Name,
               Properties_::Value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "properties";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T properties;
        T& operator()() { return properties; }
        const T& operator()() const { return properties; }
      };
    };
  };
  namespace Entities_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Hash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hash;
            T& operator()() { return hash; }
            const T& operator()() const { return hash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct NixPath
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nixPath";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nixPath;
            T& operator()() { return nixPath; }
            const T& operator()() const { return nixPath; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct IsDir
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "isDir";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isDir;
            T& operator()() { return isDir; }
            const T& operator()() const { return isDir; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Entities_

  struct Entities: sqlpp::table_t<Entities,
               Entities_::Id,
               Entities_::Hash,
               Entities_::NixPath,
               Entities_::IsDir>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "entities";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T entities;
        T& operator()() { return entities; }
        const T& operator()() const { return entities; }
      };
    };
  };
  namespace Tags_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Color
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "color";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T color;
            T& operator()() { return color; }
            const T& operator()() const { return color; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Tags_

  struct Tags: sqlpp::table_t<Tags,
               Tags_::Id,
               Tags_::Name,
               Tags_::Color>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "tags";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T tags;
        T& operator()() { return tags; }
        const T& operator()() const { return tags; }
      };
    };
  };
  namespace EntityTags_
  {
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entityId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TagId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tagId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tagId;
            T& operator()() { return tagId; }
            const T& operator()() const { return tagId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace EntityTags_

  struct EntityTags: sqlpp::table_t<EntityTags,
               EntityTags_::EntityId,
               EntityTags_::TagId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "entity_tags";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T entityTags;
        T& operator()() { return entityTags; }
        const T& operator()() const { return entityTags; }
      };
    };
  };
  namespace SinkTags_
  {
    struct EntityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entityId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityId;
            T& operator()() { return entityId; }
            const T& operator()() const { return entityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TagId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tagId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tagId;
            T& operator()() { return tagId; }
            const T& operator()() const { return tagId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace SinkTags_

  struct SinkTags: sqlpp::table_t<SinkTags,
               SinkTags_::EntityId,
               SinkTags_::TagId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "sink_tags";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T sinkTags;
        T& operator()() { return sinkTags; }
        const T& operator()() const { return sinkTags; }
      };
    };
  };
} // namespace ogma
} // namespace db
#endif
